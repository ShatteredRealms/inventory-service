// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/dev/sro/inventory-service/pkg/pb/inventory_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=/home/wil/dev/sro/inventory-service/pkg/pb/inventory_grpc.pb.go -destination=/home/wil/dev/sro/inventory-service/pkg/mocks/inventory_grpc.pb_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pb "github.com/ShatteredRealms/inventory-service/pkg/pb"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockInventoryServiceClient is a mock of InventoryServiceClient interface.
type MockInventoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceClientMockRecorder
	isgomock struct{}
}

// MockInventoryServiceClientMockRecorder is the mock recorder for MockInventoryServiceClient.
type MockInventoryServiceClientMockRecorder struct {
	mock *MockInventoryServiceClient
}

// NewMockInventoryServiceClient creates a new mock instance.
func NewMockInventoryServiceClient(ctrl *gomock.Controller) *MockInventoryServiceClient {
	mock := &MockInventoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryServiceClient) EXPECT() *MockInventoryServiceClientMockRecorder {
	return m.recorder
}

// GetInventory mocks base method.
func (m *MockInventoryServiceClient) GetInventory(ctx context.Context, in *pb.CharacterTarget, opts ...grpc.CallOption) (*pb.Inventory, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInventory", varargs...)
	ret0, _ := ret[0].(*pb.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockInventoryServiceClientMockRecorder) GetInventory(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockInventoryServiceClient)(nil).GetInventory), varargs...)
}

// SetInventory mocks base method.
func (m *MockInventoryServiceClient) SetInventory(ctx context.Context, in *pb.UpdateInventoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetInventory", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetInventory indicates an expected call of SetInventory.
func (mr *MockInventoryServiceClientMockRecorder) SetInventory(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInventory", reflect.TypeOf((*MockInventoryServiceClient)(nil).SetInventory), varargs...)
}

// MockInventoryServiceServer is a mock of InventoryServiceServer interface.
type MockInventoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceServerMockRecorder
	isgomock struct{}
}

// MockInventoryServiceServerMockRecorder is the mock recorder for MockInventoryServiceServer.
type MockInventoryServiceServerMockRecorder struct {
	mock *MockInventoryServiceServer
}

// NewMockInventoryServiceServer creates a new mock instance.
func NewMockInventoryServiceServer(ctrl *gomock.Controller) *MockInventoryServiceServer {
	mock := &MockInventoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryServiceServer) EXPECT() *MockInventoryServiceServerMockRecorder {
	return m.recorder
}

// GetInventory mocks base method.
func (m *MockInventoryServiceServer) GetInventory(arg0 context.Context, arg1 *pb.CharacterTarget) (*pb.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", arg0, arg1)
	ret0, _ := ret[0].(*pb.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockInventoryServiceServerMockRecorder) GetInventory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockInventoryServiceServer)(nil).GetInventory), arg0, arg1)
}

// SetInventory mocks base method.
func (m *MockInventoryServiceServer) SetInventory(arg0 context.Context, arg1 *pb.UpdateInventoryRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInventory", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetInventory indicates an expected call of SetInventory.
func (mr *MockInventoryServiceServerMockRecorder) SetInventory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInventory", reflect.TypeOf((*MockInventoryServiceServer)(nil).SetInventory), arg0, arg1)
}

// mustEmbedUnimplementedInventoryServiceServer mocks base method.
func (m *MockInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInventoryServiceServer")
}

// mustEmbedUnimplementedInventoryServiceServer indicates an expected call of mustEmbedUnimplementedInventoryServiceServer.
func (mr *MockInventoryServiceServerMockRecorder) mustEmbedUnimplementedInventoryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInventoryServiceServer", reflect.TypeOf((*MockInventoryServiceServer)(nil).mustEmbedUnimplementedInventoryServiceServer))
}

// MockUnsafeInventoryServiceServer is a mock of UnsafeInventoryServiceServer interface.
type MockUnsafeInventoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInventoryServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeInventoryServiceServerMockRecorder is the mock recorder for MockUnsafeInventoryServiceServer.
type MockUnsafeInventoryServiceServerMockRecorder struct {
	mock *MockUnsafeInventoryServiceServer
}

// NewMockUnsafeInventoryServiceServer creates a new mock instance.
func NewMockUnsafeInventoryServiceServer(ctrl *gomock.Controller) *MockUnsafeInventoryServiceServer {
	mock := &MockUnsafeInventoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInventoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInventoryServiceServer) EXPECT() *MockUnsafeInventoryServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInventoryServiceServer mocks base method.
func (m *MockUnsafeInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInventoryServiceServer")
}

// mustEmbedUnimplementedInventoryServiceServer indicates an expected call of mustEmbedUnimplementedInventoryServiceServer.
func (mr *MockUnsafeInventoryServiceServerMockRecorder) mustEmbedUnimplementedInventoryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInventoryServiceServer", reflect.TypeOf((*MockUnsafeInventoryServiceServer)(nil).mustEmbedUnimplementedInventoryServiceServer))
}
